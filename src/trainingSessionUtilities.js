import {FIREBASE_DB} from './firestoreModel'
import { collection, doc, setDoc, getDoc, addDoc, query, where,getDocs} from 'firebase/firestore'

// The training sessions is saved in this way:
// e.g. 
//  {
//     sessionId: 1234 (generated by firebase),
//     userId: user@example.com,
//     createdAt: 2025/04/08,
//     ...sessionData
// } 
//
// so it is one session as a unit, referenced by the userId. If a user has multiple sessions, 
// they are saved in separate units, referenced by the userId.
// This can allow fast changes to a single session, and also allows for easy retrieval of all sessions for a user.

// This function adds a new session to the database, referenced by the userId.
// and returns the sessionId.
export async function addNewSessionToFireStore(userId, sessionData) {

    try {
        const sessionRef = await addDoc(collection(FIREBASE_DB, "sessions"),  //collection() will automatically generate a new id for the session
        {userId:userId,
         ...sessionData, 
         createdAt: new Date()});

        return sessionRef.id;

    } catch (error) {
        console.error("Error adding training session: ", error);
        throw error;
    }
}

// this function edits a session, referenced by the sessionId.
// It completely replaces the sessionData with the new sessionData.
export async function editSession(userId, sessionId, sessionData){
    try{
        console.log(`Editing session ${sessionId} for user ${userId}`, sessionData);
        const sessionRef = doc(FIREBASE_DB, "sessions", sessionId);
        const docSnap = await getDoc(sessionRef);
        if (!docSnap.exists()){
            throw new Error("Session not found with id: " + sessionId);
        }
        
        // Ensure userId is included in the data
        const dataToSave = {
            ...sessionData,
            userId: userId
        };
        
        await setDoc(sessionRef, dataToSave);
        console.log(`Successfully edited session ${sessionId}`);
    } catch (error) {
        if (error.message.includes("Session not found")){
            throw error;
        }
        else{
            console.error("Error editing training session: ", error);
        }
        throw error;
    }
}

// This function retrieves all sessions for a user, referenced by the userId.
// and returns an array of sessionIds.
/*
A query is a request for data from a collection.
We don't use getDoc because we don't know all the sessionIds(document IDs) for a user
so we need to filter based on a field (userId)
*/
export async function getUserSessions(userId) {
    try{
        // Create a query
        const q = query(collection(FIREBASE_DB, "sessions"), where("userId", "==", userId));
        // Execute the query
        const querySnap = await getDocs(q);
        // Convert the querySnapshot to an array of sessions
        return querySnap.docs.map((doc) => (
            {id: doc.id,
                ...doc.data()
            }
        ))
    } catch (error) {
        console.error("Error getting user sessions: ", error);
        throw error;
    }}


    export async function getSession(sessionId) {
        try {
            const docSnap = await getDoc(doc(FIREBASE_DB, "sessions", sessionId));
            if (!docSnap.exists()) {
                throw new Error("Session not found with id: " + sessionId);
            }
            return {
                id: docSnap.id,
                ...docSnap.data()
            };
        } catch (error) {
            console.error("Error getting session: ", error);
            throw error;
        }
    }